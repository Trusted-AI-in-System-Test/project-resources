[
  {
    "title": "Fix and add warnings for RTL with invalid landing",
    "html_url": "https://github.com/PX4/PX4-Autopilot/pull/13873",
    "body": "**Describe problem solved by this pull request**\r\nCurrently RTL skips this segment of code which displays an error if the vehicle is unable to use the mission.:\r\n`} else {\r\n\t\t\t\t// Otherwise use regular RTL.\r\n\t\t\t\tmavlink_log_critical(_navigator->get_mavlink_log_pub(), \"RTL: unable to use mission landing\");\r\n\t\t\t}`\r\nWe have also ran into issues with users missing this initial message. This has lead to users being confused as to why the fixedwing vehicle is not landing. \r\n\r\n**Describe your solution**\r\nThis gets rid of the dead code introduced previously, and fixes the bug with the warning message not being displayed. It also adds a message that displays every 30 seconds warning the user that the vehicle cannot use the mission landing. \r\n\r\n**Describe possible alternatives**\r\nThe best alternative would be to reject invalid missions and keep the current valid mission on the vehicle. This would get rid of an invalid landing being uploaded to the vehicle.  \r\n\r\n**Test data / coverage**\r\nThis was tested in SITL\r\nhttps://review.px4.io/plot_app?log=cfa987ce-62c4-4a50-b018-ca3456d892c3\r\n\r\nA version of this has also been in use on our Fixedwing vehicles since August. \r\n",
    "state": "closed",
    "pull_request": {
      "url": "https://api.github.com/repos/PX4/PX4-Autopilot/pulls/13873",
      "html_url": "https://github.com/PX4/PX4-Autopilot/pull/13873",
      "diff_url": "https://github.com/PX4/PX4-Autopilot/pull/13873.diff",
      "patch_url": "https://github.com/PX4/PX4-Autopilot/pull/13873.patch",
      "merged_at": null
    }
  },
  {
    "title": "nxp_fmuk66-v3 disable px4flow temporarily",
    "html_url": "https://github.com/PX4/PX4-Autopilot/pull/12632",
    "body": "As a precaution while we debug the underlying issue.\r\n\r\n@davids5 @igalloway \r\n\r\n\r\nhttps://review.px4.io/plot_app?log=0bcf24d7-b989-4283-a11d-c7443d9fd10d\r\n\r\nVery high cpu usage in the I2C WQ from the px4flow.",
    "state": "closed",
    "pull_request": {
      "url": "https://api.github.com/repos/PX4/PX4-Autopilot/pulls/12632",
      "html_url": "https://github.com/PX4/PX4-Autopilot/pull/12632",
      "diff_url": "https://github.com/PX4/PX4-Autopilot/pull/12632.diff",
      "patch_url": "https://github.com/PX4/PX4-Autopilot/pull/12632.patch",
      "merged_at": null
    }
  },
  {
    "title": "[WIP] VTOL attitude control: fix pusher support in hover",
    "html_url": "https://github.com/PX4/PX4-Autopilot/pull/12899",
    "body": "Pusher assist in position control is broken currently. Reason for it is that _pusher_throttle  is only updated every time https://github.com/PX4/Firmware/blob/69475a172bf743fb4b735d5e5595d8a23f2dba66/src/modules/vtol_att_control/vtol_att_control_main.cpp#L420 is executed, and otherwise _pusher_throttle=0 is set. And update_mc_state is only updated when mc_virtual_attitude_sp is updated.\r\n\r\nAlso reproducable in SITL (unsteady actuator_controls(3), see below)\r\n\r\nI made a quick fix for that by just filling the actuator outputs if the MC or FW virtual attitude sp have been updated. \r\n\r\n\r\n**Test data / coverage**\r\nSITL: before fix:\r\n![image](https://user-images.githubusercontent.com/26798987/64269866-efd0c480-cf3a-11e9-951d-5bf900f8cada.png)\r\nAfter the fix:\r\n![image](https://user-images.githubusercontent.com/26798987/64269946-0bd46600-cf3b-11e9-9cf1-4e9a3d7397ed.png)\r\n\r\n\r\nBench Test:\r\n\r\nhttps://review.px4.io/plot_app?log=afef455a-a52a-4055-9013-4ff2e4e5eecb\r\n\r\n\r\n",
    "state": "closed",
    "pull_request": {
      "url": "https://api.github.com/repos/PX4/PX4-Autopilot/pulls/12899",
      "html_url": "https://github.com/PX4/PX4-Autopilot/pull/12899",
      "diff_url": "https://github.com/PX4/PX4-Autopilot/pull/12899.diff",
      "patch_url": "https://github.com/PX4/PX4-Autopilot/pull/12899.patch",
      "merged_at": null
    }
  },
  {
    "title": "mc_pos_control: fix position setpoint overshoot",
    "html_url": "https://github.com/PX4/PX4-Autopilot/pull/8240",
    "body": "This PR addresses massive position setpoint overshoot caused by `_vel_sp_prev` windup. The bug is critical for offboard mode usage.\r\n\r\nFlying in offboard mode we had constantly observed position setpoint overshoots in case of flight to distant setpoint. E.g., here we are flying back and forth in offboard mode: https://review.px4.io/plot_app?log=61a675f6-020a-462f-b1cf-b58974460d44. Overshoots really stand out:\r\n\r\n![Overshoots](https://user-images.githubusercontent.com/20798956/32437968-ff23a816-c2f9-11e7-8745-67fef6ea073d.png)\r\n\r\nHere is plot of y, vy and corresponding setpoints for 1000 m flight in offboard in SITL on current master (https://logs.px4.io/plot_app?log=92b7ba3c-e2f7-4094-98a3-05e8b5a8493f):\r\n\r\n![master](https://user-images.githubusercontent.com/20798956/32437865-b5007b24-c2f9-11e7-9580-2f456f57f81b.png)\r\n\r\nAs can be seen on the plot, copter have overshooted setpoint for over 60 m because velocity setpoint started to drop from max forward velocity when copter already was 50 m ahead of setpoint.\r\n\r\nAfter debugging of mc_pos_control_main.cpp it became clear that cause of overshoots is windup of `_vel_sp_prev(0)` and `(1)`. The reason is [this fragment](https://github.com/PX4/Firmware/blob/aa699cf4b7e63d9bf17dc2ba2b95e2e02224a6ab/src/modules/mc_pos_control/mc_pos_control_main.cpp#L2455) of `calculate_velocity_setpoint()`: \r\n\r\n```c++\r\nif (!_control_mode.flag_control_auto_enabled) {\r\n\tvel_sp_slewrate(dt);\r\n}\r\n\r\n_vel_sp_prev = _vel_sp;\r\n\r\n/* ... */\r\n\r\n/* make sure velocity setpoint is constrained in all directions (xyz) */\r\nfloat vel_norm_xy = sqrtf(_vel_sp(0) * _vel_sp(0) + _vel_sp(1) * _vel_sp(1));\r\n\r\nif (vel_norm_xy > _vel_max_xy) {\r\n\t_vel_sp(0) = _vel_sp(0) * _vel_max_xy / vel_norm_xy;\r\n\t_vel_sp(1) = _vel_sp(1) * _vel_max_xy / vel_norm_xy;\r\n}\r\n```\r\nSo `vel_sp_slewrate()` never see constrained velocity and `_vel_sp_prev` continues to rise to hunders and thousands m/s. When copter approaches the setpoint, `_vel_sp_prev` drops, but it's change rate is limited by `vel_sp_slewrate()`. Because of this windup `_vel_sp` can't begin to lower at time and vehicle overshoots. Overshoots are negligible in AUTO mode because mc_pos_control moves position setpoint so it is always close to the vehicle.\r\n\r\nIt would be more correct to address this moving `_vel_sp_prev = _vel_sp` to the end of control cycle, but this change causes incorrect behavior of smooth takeoff limiter so I had to move velocity constraining before `_vel_sp_prev` assignment, leaving smooth takeoff limit after it.\r\n\r\nThis is the same 1000 m flight in SITL after fix (https://logs.px4.io/plot_app?log=d5bd2519-432c-446a-b8c9-fd021c2fdab6):\r\n\r\n![fix](https://user-images.githubusercontent.com/20798956/32439298-21fcc03e-c2ff-11e7-963c-92051e217d9e.png)\r\n\r\n@MaEtUgR, @Stifael, please review.",
    "state": "closed",
    "pull_request": {
      "url": "https://api.github.com/repos/PX4/PX4-Autopilot/pulls/8240",
      "html_url": "https://github.com/PX4/PX4-Autopilot/pull/8240",
      "diff_url": "https://github.com/PX4/PX4-Autopilot/pull/8240.diff",
      "patch_url": "https://github.com/PX4/PX4-Autopilot/pull/8240.patch",
      "merged_at": null
    }
  },
  {
    "title": "offboard land detection",
    "html_url": "https://github.com/PX4/PX4-Autopilot/pull/19560",
    "body": "**Describe problem solved by this pull request**\r\nWe use offboard mode to control our quadrotor.\r\nWe generate a trajectory in z position with consistent derivatives.\r\nWhen we land, our z position increase downward, z speed converge to our target (1m/s downward) and our z acceleration converges to 0 when the speed stabilizes.\r\n\r\nThe issue is that when we hit the ground, land detector detect it but the position control detect that we want to takeoff so thrust increase and it never disarm.\r\n\r\nThe takeoff detection is due to our z acceleration been about 0 but with a very small oscillation that makes point upward  by moments.\r\n\r\nHere is a log with one false detection : https://review.px4.io/plot_app?log=ced2541e-fd20-4fd3-88c6-2f284262bc95\r\n\r\n**Describe your solution**\r\nin offboard mode, if we have a valid z position setpoint superior (so more downward) than estimated, do not consider we want to take off. Same thing on z speed.\r\n\r\nThis solution will change the behavior: in offboard mode, if we have a valid z position setpoint more downward than estimated and a speed setpoint pointing upward, we will no longer consider we want to take off.",
    "state": "open",
    "pull_request": {
      "url": "https://api.github.com/repos/PX4/PX4-Autopilot/pulls/19560",
      "html_url": "https://github.com/PX4/PX4-Autopilot/pull/19560",
      "diff_url": "https://github.com/PX4/PX4-Autopilot/pull/19560.diff",
      "patch_url": "https://github.com/PX4/PX4-Autopilot/pull/19560.patch",
      "merged_at": null
    }
  }
]